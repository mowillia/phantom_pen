# -*- coding: utf-8 -*-
"""corpora_metadata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1llX3aQ1k-4zOaE968CxEDv7jcdV2cOPl

#### Metadata for the Corpora

(July 1, 2019)
"""

# Packages

import pandas as pd
import math, scipy
import copy
import re
import os
import time

# used in the count of words
import string

import nltk.data # natural language tool kit

# for tokenizing sentences according by the words
from nltk.tokenize import WhitespaceTokenizer

from nltk.tokenize import sent_tokenize, word_tokenize # $ pip install nltk
nltk.download('punkt')

import numpy as np

from os import listdir
from os.path import isfile, join

import matplotlib.pyplot as plt

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from numpy import random

# Run this cell to mount your Google Drive.
from google.colab import drive
drive.mount('/content/drive')

"""#####

### Getting List of Files
"""

'''
    For the given path, get the List of all files in the directory tree 
    From: https://thispointer.com/python-how-to-get-list-of-files-in-directory-and-sub-directories/
'''
def getListOfFiles(dirName):
    # create a list of file and sub directories 
    # names in the given directory 
    listOfFile = os.listdir(dirName)
    allFiles = list()
    # Iterate over all the entries
    for entry in listOfFile:
        # Create full path
        fullPath = os.path.join(dirName, entry)
        # If entry is a directory then get the list of files in this directory 
        if os.path.isdir(fullPath):
            allFiles = allFiles + getListOfFiles(fullPath)
        else:
            allFiles.append(fullPath)
                
    return allFiles

# start time
start_time = time.time()

# directory name
dirname = '/content/drive/My Drive/writrly_proj_files/Atlantic_essays/' 

# getting raw list of files
raw_file_list = getListOfFiles(dirname)

# eliminating the .DS Store files
raw_file_list = [x for x in raw_file_list if not ('.DS_Store' in x)];
   
# directory name
dirname_stories = '/content/drive/My Drive/writrly_proj_files/short_stories/' 

# getting raw list of files
raw_file_list_stories = getListOfFiles(dirname_stories)

# eliminating the .DS Store files
raw_file_list_stories = [x for x in raw_file_list_stories if not ('.DS_Store' in x)];


print('Run Time:', str(time.time()-start_time), ' sec')

# number of essays 
len(raw_file_list+raw_file_list_stories)



## Getting atlantic article meta data

k = 1678

filename = raw_file_list[k]

#locations of forward slashes
sl_locs = [i for i, letter in enumerate(filename) if letter == '/']
# location of slash before subject
idx_subj_1 =  sl_locs[5]
idx_subj_2 = sl_locs[6]
# location of last forward slash
idx = sl_locs[-1]

# concatenated file name
filename_concat = filename[idx+1:]

# first underscore after title and before author
idx1 = filename[idx+1:].find('_')
# location of break between author and date
idx2 = filename_concat[idx1+1:].find('_')


# metadata
#author = filename[]
topic = filename[idx_subj_1+1:idx_subj_2]
title = filename_concat[:idx1]
author = filename_concat[idx1+1:][:idx2]
date = filename_concat[idx1+1:][idx2+1:-4]

print(topic)
print(title)
print(author)

print(date)

## Getting short story

k = 100

filename = raw_file_list_stories[k]

#locations of forward slashes
sl_locs = [i for i, letter in enumerate(filename) if letter == '/']
# location of slash before subject
idx_subj_1 =  sl_locs[4]
idx_subj_2 = sl_locs[5]
# location of last forward slash
idx = sl_locs[-1]

# concatenated file name
filename_concat = filename[idx+1:]

# first underscore after title and before author
idx1 = filename[idx+1:].find('_')
# location of break between author and date
idx2 = filename_concat[idx1+1:].find('_')


# metadata
#author = filename[]
topic = filename[idx_subj_1+1:idx_subj_2]
title = filename_concat[:idx1]
author = filename_concat[idx1+1:][idx2+1:-4]

print(topic)
print(title)
print(author)

def filename_metadata(filename):

    #locations of forward slashes
    sl_locs = [i for i, letter in enumerate(filename) if letter == '/']
    # location of slash before subject
    idx_subj_1 =  sl_locs[5]
    idx_subj_2 = sl_locs[6]
    # location of last forward slash
    idx = sl_locs[-1]

    # concatenated file name
    filename_concat = filename[idx+1:]

    # first underscore after title and before author
    idx1 = filename[idx+1:].find('_')
    # location of break between author and date
    idx2 = filename_concat[idx1+1:].find('_')


    # metadata
    #author = filename[]
    topic = filename[idx_subj_1+1:idx_subj_2]
    title = filename_concat[:idx1]
    author = filename_concat[idx1+1:][:idx2]
    date = filename_concat[idx1+1:][idx2+1:-4]

    return {'Topic': topic, 
    'Title': title,
    'Author': author}

# test
filename_metadata(raw_file_list[60])

def filename_metadata_stories(filename):

    #locations of forward slashes
    sl_locs = [i for i, letter in enumerate(filename) if letter == '/']
    # location of slash before subject
    idx_subj_1 =  sl_locs[4]
    idx_subj_2 = sl_locs[5]
    # location of last forward slash
    idx = sl_locs[-1]

    # concatenated file name
    filename_concat = filename[idx+1:]

    # first underscore after title and before author
    idx1 = filename[idx+1:].find('_')
    # location of break between author and date
    idx2 = filename_concat[idx1+1:].find('_')


    # metadata
    #topic = filename[idx_subj_1+1:idx_subj_2]
    topic = 'short story'
    title = filename_concat[:idx1]
    author = filename_concat[idx1+1:][idx2+1:-4]
    
    # remove hyphen and capitalize author
    author = author.replace('-', ' ')
    author = author.title()
    
    # remove hyphen and capitalize title
    title = title.replace('-', ' ')
    title = title.title()
    
    return {'Topic': topic, 
    'Title': title,
    'Author': author}

#test
filename_metadata_stories(raw_file_list_stories[60])

# create master data frame 
corpus_metadata = pd.DataFrame(columns = ['Topic', 'Title','Author'])

## Fill in elements from the file 
for elem in raw_file_list:
    corpus_metadata = corpus_metadata.append(filename_metadata(elem)
                                       ,ignore_index = True)
for elem in raw_file_list_stories:
    corpus_metadata = corpus_metadata.append(filename_metadata_stories(elem)
                                       ,ignore_index = True)

"""### Calculations"""

len(corpus_metadata[corpus_metadata['Topic']=='short story'])

## number of short story authors
story_author = corpus_metadata[corpus_metadata['Topic']=='Short Story']['Author']
len(set(story_author.tolist()))

# number of articles for each topic
topics = set(corpus_metadata['Topic'].tolist())
for topic in topics:
  print(topic, ":", len(corpus_metadata[corpus_metadata['Topic']==topic]))
  
  
  topic_author = corpus_metadata[corpus_metadata['Topic']==topic]['Author']
  print('    ', "num authors:", len(set(topic_author.tolist())))

